// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reviewing.Infrastructure;

#nullable disable

namespace Reviewing.Infrastructure.Migrations
{
    [DbContext(typeof(ReviewingDbContext))]
    [Migration("20230905074335_add short desc to review")]
    partial class addshortdesctoreview
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReviewTag", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagsName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId", "TagsName");

                    b.HasIndex("TagsName");

                    b.ToTable("ReviewTag", "reviewing");
                });

            modelBuilder.Entity("Reviewing.Domain.AggregateModels.CommentAggregate.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Comments", "reviewing");
                });

            modelBuilder.Entity("Reviewing.Domain.AggregateModels.ReviewAggregate.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reviews", "reviewing");
                });

            modelBuilder.Entity("Reviewing.Domain.AggregateModels.ReviewAggregate.Tag", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Tags", "reviewing");
                });

            modelBuilder.Entity("ReviewTag", b =>
                {
                    b.HasOne("Reviewing.Domain.AggregateModels.ReviewAggregate.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reviewing.Domain.AggregateModels.ReviewAggregate.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reviewing.Domain.AggregateModels.ReviewAggregate.Review", b =>
                {
                    b.OwnsOne("Reviewing.Domain.AggregateModels.ReviewAggregate.Subject", "Subject", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Grade")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Reviews", "reviewing");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");

                            b1.OwnsOne("Reviewing.Domain.Enumerations.SubjectGroups", "Group", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .HasColumnType("int");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<Guid>("ReviewId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("Id");

                                    b2.HasIndex("Name")
                                        .IsUnique();

                                    b2.HasIndex("ReviewId")
                                        .IsUnique();

                                    b2.ToTable("SubjectGroups", "reviewing");

                                    b2.WithOwner()
                                        .HasForeignKey("ReviewId");
                                });

                            b1.Navigation("Group")
                                .IsRequired();
                        });

                    b.OwnsMany("Reviewing.Domain.Identifiers.CommentId", "Comments", b1 =>
                        {
                            b1.Property<Guid>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("CommentId");

                            b1.Property<Guid>("ReviewId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Value", "ReviewId");

                            b1.HasIndex("ReviewId");

                            b1.ToTable("ReviewComments", "reviewing");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.OwnsMany("Reviewing.Domain.Identifiers.UserId", "Likes", b1 =>
                        {
                            b1.Property<Guid>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("UserId");

                            b1.Property<Guid>("ReviewId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Value", "ReviewId");

                            b1.HasIndex("ReviewId");

                            b1.ToTable("ReviewLikes", "reviewing");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Subject")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
